# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddContactToDeviceInput {
  """Whether to trigger on alarm1"""
  alarm1: Boolean!

  """Whether to trigger on alarm2"""
  alarm2: Boolean!

  """Device CLI"""
  cli: String!

  """Whether to trigger daily"""
  daily: Boolean!

  """E-Mail address"""
  email: String!

  """Whether to trigger on event"""
  event: Boolean!

  """Whether to trigger on memory alert"""
  memory: Boolean!

  """Name"""
  name: String!

  """Phone number"""
  phone: String!

  """Whether to trigger on power alert"""
  power: Boolean!

  """Whether to trigger on SMS Limit"""
  smsLimit: Boolean!
}

input AddUserPermissionInput {
  """Name of the permitted resource"""
  resource: String!

  """Permission Type"""
  type: Permission!

  """User UUID"""
  uuid: ID!
}

input AssignDeviceToProjectInput {
  """Device CLI"""
  cli: String

  """Project UUID"""
  uuid: ID!
}

input CreateProjectInput {
  """Associated devices"""
  devices: [String!]

  """Project name"""
  name: String!

  """Uuid of the user owning the project"""
  userUuid: ID!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteContactInput {
  """Device CLI"""
  cli: String!

  """Unique database ID"""
  id: Int!
}

input DeleteProjectInput {
  """Project UUID"""
  uuid: ID!
}

type Device {
  """CLI ID"""
  cli: String!

  """Device type (MR2000 or MR3000)"""
  deviceType: String!

  """Firmware version"""
  firmware: String!

  """FTP forward status"""
  ftp: Boolean!

  """IP address, if any"""
  ip: String

  """Device name"""
  name: String!

  """PID"""
  pid: String

  """Project the device belongs to (if any)"""
  project: Project

  """Serial number"""
  serialNumber: String!
}

type DeviceContact {
  alarm1: Boolean!
  alarm2: Boolean!
  cli: String!
  daily: Boolean!
  email: String!
  event: Boolean!
  id: Int!
  memory: Boolean
  name: String!
  phone: String!
  power: Boolean!
  smsLimit: Boolean!
}

type DeviceParams {
  ala1X: Float!
  ala1Y: Float!
  ala1Z: Float!
  ala2X: Float!
  ala2Y: Float!
  ala2Z: Float!
  trigX: Float!
  trigY: Float!
  trigZ: Float!
  unitX: String!
  unitY: String!
  unitZ: String!
}

input EditContactInput {
  """Whether to trigger on alarm1"""
  alarm1: Boolean!

  """Whether to trigger on alarm2"""
  alarm2: Boolean!

  """Device CLI"""
  cli: String!

  """Whether to trigger daily"""
  daily: Boolean!

  """E-Mail address"""
  email: String!

  """Whether to trigger on event"""
  event: Boolean!

  """Unique database ID"""
  id: Int!

  """Whether to trigger on memory alert"""
  memory: Boolean!

  """Name"""
  name: String!

  """Phone number"""
  phone: String!

  """Whether to trigger on power alert"""
  power: Boolean!

  """Whether to trigger on SMS Limit"""
  smsLimit: Boolean!
}

type EventsTable {
  items: [EventsTableRow!]!
  lengthAll: Int!
  lengthEvt: Int!
  lengthPk: Int!
  lengthZip: Int!
}

type EventsTableRow {
  """pk_frq.VSUM"""
  VSUM: String

  """events.rec_time"""
  dateTime: DateTime!

  """Download URL"""
  downloadURL: String

  """events.num"""
  file: String!

  """events.filenam end"""
  fileName: String

  """pk_frq.frqX"""
  frequencyX: String

  """pk_frq.frqY"""
  frequencyY: String

  """pk_frq.frqZ"""
  frequencyZ: String

  """events.peakX + events.unitX"""
  peakX: String!

  """events.peakY + events.unitY"""
  peakY: String!

  """events.peakZ + events.unitZ"""
  peakZ: String!

  """Preview URL"""
  previewURL: String

  """events.typ converted"""
  type: String!
}

type LevelWriting {
  """Max value"""
  max: Float!

  """X-axes"""
  x: [LevelWritingAxis!]!

  """Y-axes"""
  y: [LevelWritingAxis!]!

  """Z-axes"""
  z: [LevelWritingAxis!]!
}

type LevelWritingAxis {
  """Data Points"""
  data: [LevelWritingPoint!]!

  """Station ID"""
  name: String!
}

type LevelWritingPoint {
  """Timestamp"""
  x: DateTime!

  """Value"""
  y: Float
}

type Mutation {
  addContactToDevice(addContactToDeviceInput: AddContactToDeviceInput!): Device!
  addPermission(addUserPermissionInput: AddUserPermissionInput!): User!
  assignDeviceToProject(assignDeviceToProjectInput: AssignDeviceToProjectInput!): Project!
  createProject(createProjectInput: CreateProjectInput!): Project!
  deleteContact(deleteContactInput: DeleteContactInput!): Device!
  deleteProject(deleteProjectInput: DeleteProjectInput!): Project!
  editContact(editContactInput: EditContactInput!): Device!
  register(registerUserInput: RegisterUserInput!): User
  removeDeviceFromProject(removeDeviceFromProjectInput: RemoveDeviceFromProjectInput!): Project!
  updateProjectName(updateProjectInput: UpdateProjectInput!): Project!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

enum Permission {
  MR2000
  MR3000
  PROJECT
}

type Project {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Devices that the user has access to"""
  devices: [String!]!

  """Last modification date"""
  lastModifiedAt: DateTime!

  """Project Name"""
  name: String!

  """User that owns the project"""
  user: User!

  """UUID"""
  uuid: ID!
}

type Query {
  allUsers: [User!]!
  deviceParams(cli: String!): DeviceParams!
  eventTable(cli: String!, descending: Boolean, filter: String, orderBy: String, skip: Int!, take: Int!): EventsTable!
  getDeviceContacts(cli: String!): [DeviceContact!]!
  getProjectDevices(name: String, uuid: ID): [Device!]!
  getUserDevices(assigned: Boolean, unassigned: Boolean, uuid: ID!): [Device!]!
  getUserProjects(uuid: ID!): [Project!]!
  isEmailAllowed(email: String!): Boolean!
  levelWriting(clients: [String!]!, end: DateTime!, resolution: Int!, start: DateTime!): LevelWriting!
  myContacts: [DeviceContact!]!
  myDevices(assigned: Boolean, unassigned: Boolean): [Device!]!
  myProjects: [Project!]!
  myUser: User!
  user(cognitoUuid: ID, uuid: ID): User!
}

input RegisterUserInput {
  """Date of birth"""
  birthdate: DateTime

  """Cognito ID"""
  cognitoUuid: ID!

  """E-mail address"""
  email: String!

  """Full name of the user"""
  fullName: String

  """phone number"""
  phone: String

  """Username"""
  username: String!
}

input RemoveDeviceFromProjectInput {
  """Device CLI"""
  cli: String

  """Project UUID"""
  uuid: ID!
}

enum Role {
  ADMIN
  USER
}

input UpdateProjectInput {
  """Project name"""
  name: String!

  """Project UUID"""
  uuid: ID!
}

input UpdateUserInput {
  uuid: ID!
}

type User {
  """Cognito user UUID"""
  cognitoUuid: ID!

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Devices that the user has access to"""
  devices: [String!]!

  """E-mail"""
  email: String!

  """Last modification date"""
  lastModifiedAt: DateTime!

  """Projects that the user has access to"""
  projects: [Project!]!

  """Role of the User"""
  role: Role!

  """Username"""
  username: String!

  """UUID"""
  uuid: ID!
}
