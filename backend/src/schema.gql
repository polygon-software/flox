# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessControlledEntity {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Marks this object as readable for all logged in users"""
  loggedInReadAccess: Boolean!

  """Owner of this object, has full control over it"""
  owner: User!

  """Marks this object as publicly readable"""
  publicReadAccess: Boolean!

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

input AddUserToUserGroupInput {
  """Uuid of group to which user shall be added"""
  userGroupUuid: ID!

  """Uuid of user that shall be added to group"""
  userUuid: ID!
}

input AddUsersToUserGroupInput {
  """Uuid of group to which user shall be added"""
  userGroupUuid: ID!

  """Uuids of users that shall be added to group"""
  userUuids: [ID!]!
}

type BoundingBox {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Bounding-Box height in percentage of image height"""
  height: Float!

  """Label to which the bounding box belongs"""
  label: Label!

  """Bounding-Box position from the left side of the image, in percentage"""
  left: Float!

  """Bounding-Box position from the top side of the image, in percentage"""
  top: Float!

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!

  """Bounding-Box width in percentage of image width"""
  width: Float!
}

input CreateFileInput {
  """Name of File"""
  filename: String!
  loggedInReadAccess: Boolean = false

  """File mimetype"""
  mimetype: String!

  """Path to file"""
  path: String!
  publicReadAccess: Boolean = false
  readAccess: [ID!] = []

  """Size of file in bytes"""
  size: Int!
  writeAccess: [ID!] = []
}

input CreateImageInput {
  file: ID!
  loggedInReadAccess: Boolean = false
  objectRecognition: Boolean = false
  publicReadAccess: Boolean = false
  readAccess: [ID!] = []
  writeAccess: [ID!] = []
}

input CreateUserGroupInput {
  """Name of group"""
  name: String!
  users: [ID!] = []
}

input CreateUserInput {
  cognitoUuid: String!
  email: String!
  role: String
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteInput {
  uuid: ID!
}

type FileSearchOutput {
  """How many items are found within database"""
  count: String!

  """Files that fit query"""
  data: [S3File!]!
}

type FolderOutput {
  """Creation date of oldest file in folder"""
  createdAt: DateTime!

  """Number of files"""
  files: Float!

  """Name of the folder"""
  name: String!

  """Summed of size of all files in folder, in bytes"""
  size: Float!

  """Last modification of any file in folder"""
  updatedAt: DateTime

  """Name of the folder"""
  uuid: ID!
}

type Image {
  """Capture Date"""
  capturedAt: DateTime

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """File"""
  file: S3File!

  """Image Height in Pixels"""
  height: Float

  """Labels of detected objects on image"""
  labels: [Label!]!

  """GPS Latitude"""
  latitude: Float

  """Marks this object as readable for all logged in users"""
  loggedInReadAccess: Boolean!

  """GPS Longitude"""
  longitude: Float

  """Owner of this object, has full control over it"""
  owner: User!

  """Marks this object as publicly readable"""
  publicReadAccess: Boolean!

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!

  """Image Width in Pixels"""
  width: Float
}

type Label {
  """Bounding box for every instance of this label on image"""
  boundingBox: BoundingBox!

  """Confidence between 0 and 100"""
  confidence: Float!

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Image on which this label was detected"""
  image: Image!

  """Label Name"""
  name: String!

  """Parent labels"""
  parents: [String!]!

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

input ManipulateAccessGroupsInput {
  addReadAccess: [ID!] = []
  addWriteAccess: [ID!] = []
  removeReadAccess: [ID!] = []
  removeWriteAccess: [ID!] = []
  uuid: ID!
}

type Mutation {
  AddUserToUserGroup(addUserToUserGroupInput: AddUserToUserGroupInput!): UserGroup!
  AddUsersToUserGroup(addUsersToUserGroupInput: AddUsersToUserGroupInput!): UserGroup!
  CreateFile(createFileInput: CreateFileInput!): S3File!
  CreateImage(createImageInput: CreateImageInput!): Image!
  CreateUser(createUserInput: CreateUserInput!): User!
  CreateUserGroup(createUserGroupInput: CreateUserGroupInput!): UserGroup!
  DeleteFile(deleteInput: DeleteInput!): S3File!
  DeleteImage(deleteImageInput: DeleteInput!): Image!
  DeleteUser(deleteUserInput: DeleteInput!): User!
  DeleteUserGroup(deleteInput: DeleteInput!): UserGroup!
  ManipulateFileAccessUserGroups(manipulateAccessGroups: ManipulateAccessGroupsInput!): S3File!
  RemoveUserFromUserGroup(removeUserFromUserGroupInput: RemoveUserFromUserGroupInput!): UserGroup!
  UpdateFile(updateFileInput: UpdateFileInput!): S3File!
  UpdateUser(updateUserInput: UpdateUserInput!): User!
  UpdateUserGroup(updateUserGroupInput: UpdateUserGroupInput!): UserGroup!
}

type Query {
  AllFiles(
    """URL expiration duration (in seconds)"""
    expires: Int

    """Path in which file must be located"""
    path: String

    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500
  ): [S3File!]!
  AllImages(
    """URL expiration duration (in seconds)"""
    expires: Int

    """How many images to skip"""
    skip: Int = 0

    """Number of images to load"""
    take: Int = 500
  ): [Image!]!
  AllMyFiles(
    """URL expiration duration (in seconds)"""
    expires: Int

    """Path in which file must be located"""
    path: String

    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500
  ): [S3File!]!
  AllMyImages(
    """URL expiration duration (in seconds)"""
    expires: Int

    """How many images to skip"""
    skip: Int = 0

    """Number of images to load"""
    take: Int = 500
  ): [Image!]!
  AllPublicFiles(
    """URL expiration duration (in seconds)"""
    expires: Int

    """Path in which file must be located"""
    path: String

    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500
  ): [S3File!]!
  AllUserGroups(
    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500
  ): [UserGroup!]!
  AllUsers(
    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500
  ): [User!]!
  File(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuid: ID!
  ): S3File!
  FileReadAccessUserGroups(uuid: ID!): [UserGroup!]!
  FileWriteAccessUserGroups(uuid: ID!): [UserGroup!]!
  Files(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuids: [ID!] = []
  ): [S3File!]!
  Folders(
    """Path at start of folder"""
    path: String!
  ): [FolderOutput!]!
  Image(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuid: ID!
  ): Image!
  ImageForFile(
    """URL expiration duration (in seconds)"""
    expires: Int
    file: ID!
  ): Image!
  Images(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuids: [ID!] = []
  ): [Image!]!
  MyFiles(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuids: [ID!] = []
  ): [S3File!]!
  MyFolders(
    """Path at start of folder"""
    path: String!
  ): [FolderOutput!]!
  MyImages(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuids: [ID!] = []
  ): [Image!]!
  MyUser: User!
  MyUserGroups(
    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500
  ): [UserGroup!]!
  PublicFiles(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuids: [ID!] = []
  ): [S3File!]!
  PublicFolders(
    """Path at start of folder"""
    path: String!
  ): [FolderOutput!]!
  SearchAdminFiles(
    """Sort descending"""
    descending: Boolean = false

    """URL expiration duration (in seconds)"""
    expires: Int

    """Search for text within items"""
    filter: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): [FileSearchOutput!]!
  SearchFiles(
    """Sort descending"""
    descending: Boolean = false

    """URL expiration duration (in seconds)"""
    expires: Int

    """Search for text within items"""
    filter: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): [FileSearchOutput!]!
  SearchImages(
    """Sort descending"""
    descending: Boolean = false

    """URL expiration duration (in seconds)"""
    expires: Int

    """Search for text within items"""
    filter: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): [Image!]!
  SearchMyFiles(
    """Sort descending"""
    descending: Boolean = false

    """URL expiration duration (in seconds)"""
    expires: Int

    """Search for text within items"""
    filter: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): [FileSearchOutput!]!
  SearchMyImages(
    """Sort descending"""
    descending: Boolean = false

    """URL expiration duration (in seconds)"""
    expires: Int

    """Search for text within items"""
    filter: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): [Image!]!
  SearchPublicFiles(
    """Sort descending"""
    descending: Boolean = false

    """URL expiration duration (in seconds)"""
    expires: Int

    """Search for text within items"""
    filter: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): [FileSearchOutput!]!
  SearchUserGroups(
    """Sort descending"""
    descending: Boolean = false

    """Search for text within items"""
    filter: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): UserGroupSearchOutput!
  SearchUsers(
    """Sort descending"""
    descending: Boolean = false

    """Search for text within items"""
    filter: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): UserSearchOutput!
  User(cognitoUuid: ID, uuid: ID!): User!
  UserGroup(uuid: ID!): UserGroup!
  UserGroups(uuids: [ID!] = []): [UserGroup!]!
  UserGroupsOfUser(
    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500

    """User UUID"""
    userUuid: ID!
  ): [UserGroup!]!
  Users(uuids: [ID!] = []): [User!]!
}

input RemoveUserFromUserGroupInput {
  """Uuid of group to which user shall be added"""
  userGroupUuid: ID!

  """Uuid of user that shall be removed from group"""
  userUuid: ID!
}

type S3File {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Name of File"""
  filename: String

  """Marks this object as readable for all logged in users"""
  loggedInReadAccess: Boolean!

  """Files mime type"""
  mimetype: String!

  """Owner of this object, has full control over it"""
  owner: User!

  """Path that leads to file"""
  path: String

  """Marks this object as publicly readable"""
  publicReadAccess: Boolean!

  """Signed URL to upload object. Only works 1 time"""
  signedUrl: String

  """Filesize in bytes"""
  size: Float!

  """Last modification date"""
  updatedAt: DateTime

  """Pre-signed download URL"""
  url: String

  """UUID"""
  uuid: ID!
}

input UpdateFileInput {
  """Name of File"""
  filename: String

  """Path to file"""
  path: String!
  uuid: ID!
}

input UpdateUserGroupInput {
  """Name of group"""
  name: String!
  uuid: ID!
}

input UpdateUserInput {
  email: String
  username: String
  uuid: ID!
}

type User {
  """Cognito UUID"""
  cognitoUuid: String!

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """E-mail address"""
  email: String!

  """User groups this user belongs to"""
  groups: [UserGroup!]!

  """User role"""
  role: String

  """Last modification date"""
  updatedAt: DateTime

  """Username"""
  username: String!

  """UUID"""
  uuid: ID!
}

type UserGroup {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Username"""
  name: String!

  """Resources this user group has read access to"""
  readAccess: AccessControlledEntity!

  """Last modification date"""
  updatedAt: DateTime

  """Users belonging to this user group"""
  users: [User!]!

  """UUID"""
  uuid: ID!

  """Resources this user group has write access to"""
  writeAccess: AccessControlledEntity!
}

type UserGroupSearchOutput {
  """How many items are found within database"""
  count: String!

  """User Groups that fit query"""
  data: [UserGroup!]!
}

type UserSearchOutput {
  """How many items are found within database"""
  count: String!

  """Users that fit query"""
  data: [User!]!
}