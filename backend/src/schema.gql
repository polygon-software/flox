# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessControlledEntity {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Marks this object as readable for all logged in users"""
  loggedInReadAccess: Boolean!

  """Owner of this object, has full control over it"""
  owner: User!

  """Marks this object as publicly readable"""
  publicReadAccess: Boolean!

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

input AddUserToUserGroupInput {
  """Uuid of group to which user shall be added"""
  userGroupUuid: ID!

  """Uuid of user that shall be added to group"""
  userUuid: ID!
}

input AddUsersToUserGroupInput {
  """Uuid of group to which user shall be added"""
  userGroupUuid: ID!

  """Uuids of users that shall be added to group"""
  userUuids: [ID!]!
}

type Address {
  """Additional address string"""
  additionalAddress: String

  """City"""
  city: String

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Number"""
  number: String

  """Street"""
  street: String

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!

  """Zip Code"""
  zipCode: Float
}

input AdminCreateUserInput {
  deliveryMediums: [DeliveryMediums!]!
  email: String!
  lang: String
  phoneNumber: String
  role: Role!
  username: String!
}

type AdminCreateUserOutput {
  """Created user"""
  data: User!

  """password"""
  password: String
}

type Article {
  """Amount"""
  amount: Float

  """Article number"""
  articleNumber: String

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Description"""
  description: String

  """Discount in percent"""
  discount: Float

  """Form this arcticle belongs to"""
  form: Form

  """Manufacturer number"""
  manufacturerNumber: String

  """Name"""
  name: String

  """Price"""
  price: Float

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

type ArticleSuggestion {
  """Amount"""
  amount: Float

  """Article number"""
  articleNumber: String

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Description"""
  description: String

  """Manufacturer number"""
  manufacturerNumber: String

  """Name"""
  name: String

  """Price"""
  price: Float

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

type Billing {
  """Billing address"""
  address: Address

  """Billing company name"""
  companyName: String

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Billing e-mail address"""
  email: String

  """First name on bill"""
  firstName: String

  """Last name on bill"""
  lastName: String

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

type BoundingBox {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Bounding-Box height in percentage of image height"""
  height: Float!

  """Label to which the bounding box belongs"""
  label: Label!

  """Bounding-Box position from the left side of the image, in percentage"""
  left: Float!

  """Bounding-Box position from the top side of the image, in percentage"""
  top: Float!

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!

  """Bounding-Box width in percentage of image width"""
  width: Float!
}

type Client {
  """Client's address"""
  address: Address

  """Legal form of the client's company"""
  companyLegalForm: LegalForm

  """Name of the client's company"""
  companyName: String

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Client's e-mail address"""
  email: String

  """Client's first name"""
  firstName: String

  """Client's last name"""
  lastName: String

  """Client's phone number"""
  phoneNumber: String

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

type CreateArticleSuggesstionOutput {
  """Amount"""
  amount: Float!
}

input CreateFileInput {
  """Name of File"""
  filename: String!
  loggedInReadAccess: Boolean = false

  """File mimetype"""
  mimetype: String!

  """Path to file"""
  path: String!
  publicReadAccess: Boolean = false
  readAccess: [ID!] = []

  """Size of file in bytes"""
  size: Int!
  writeAccess: [ID!] = []
}

input CreateFormInput {
  """Articles"""
  articles: [UpdateArticleInput!]

  """Billing"""
  billing: UpdateBillingInput

  """Client"""
  client: UpdateClientInput

  """Problem description"""
  description: String

  """Devices"""
  devices: [UpdateDeviceInput!]

  """Employee's ID"""
  employeeId: String

  """Date the form is resolved"""
  endDate: DateTime

  """Expenses"""
  expenses: [UpdateExpenseInput!]

  """External order number"""
  externalOrderNumber: String

  """Additional text"""
  freeText: String

  """Images"""
  images: [UpdateImageFileInput!]

  """Internal order number"""
  internalOrderNumber: String

  """Whether the job is an emergency"""
  isEmergency: Boolean

  """Job details"""
  job: UpdateJobInput

  """Whether the measured voltage and power (NIV) is correct"""
  measurePower: Boolean

  """Object number"""
  objectNumber: String

  """Owner"""
  owner: String

  """Protocol date"""
  protocolDate: DateTime

  """Protocol text"""
  protocolText: String

  """Protocols"""
  protocols: [UpdateProtocolInput!]

  """Date the form is created"""
  startDate: DateTime

  """Tenant"""
  tenant: UpdateTenantInput

  """Total cost of the job"""
  totalAmount: Float
}

input CreateImageInput {
  file: ID!
  loggedInReadAccess: Boolean = false
  objectRecognition: Boolean = false
  publicReadAccess: Boolean = false
  readAccess: [ID!] = []
  writeAccess: [ID!] = []
}

input CreateUserGroupInput {
  """Name of group"""
  name: String!
  users: [ID!] = []
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteInput {
  softDelete: Boolean
  uuid: ID!
}

enum DeliveryMediums {
  CUSTOM_EMAIL
  EMAIL
  SMS
}

type Device {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Additional information about the device"""
  deviceInformation: String

  """Manufacturer that made the device"""
  deviceManufacturer: String

  """Device's model"""
  deviceModel: String

  """Device's production number"""
  deviceProductionNumber: String

  """Year the device was manufactured"""
  deviceProductionYear: Float

  """Device to repair"""
  deviceType: DeviceType

  """Form the device belongs to"""
  form: Form!

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

enum DeviceType {
  DISHWASHER
  FRIDGE
  HOB
  MICROWAVE
  OTHER
  OVEN
  STEAMER
  STOVE
  TUMBLE_DRYER
  VENTILATION
  WASHING_MACHNE
}

type Expense {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Discount in percent"""
  discount: Float

  """Form the expense belongs to"""
  form: Form

  """Expense name"""
  name: String

  """Amount of time needed for the job"""
  timeAmount: Float

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

type FileSearchOutput {
  """How many items are found within database"""
  count: String!

  """Files that fit query"""
  data: [S3File!]!
}

input FilterInput {
  """Whether is findable"""
  findable: Boolean
}

type FolderOutput {
  """Creation date of oldest file in folder"""
  createdAt: DateTime!

  """Number of files"""
  files: Float!

  """Name of the folder"""
  name: String!

  """Summed of size of all files in folder, in bytes"""
  size: Float!

  """Last modification of any file in folder"""
  updatedAt: DateTime

  """Name of the folder"""
  uuid: ID!
}

type Form {
  """Articles"""
  articles: [Article!]

  """Billing information"""
  billing: Billing

  """Job client"""
  client: Client

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Problem description"""
  description: String

  """Devices to repair"""
  devices: [Device!]

  """Employee's ID"""
  employeeId: String

  """Date the form is resolved"""
  endDate: DateTime

  """Expenses"""
  expenses: [Expense!]

  """External order number"""
  externalOrderNumber: String

  """Additonal text"""
  freeText: String

  """ImageFiles as base64"""
  imageStrings: [String!]

  """Additonal images"""
  images: [ImageFile!]

  """Internal order number"""
  internalOrderNumber: String

  """Whether the job is an emergency"""
  isEmergency: Boolean!

  """Whether the job is finished"""
  isFinished: Boolean!

  """Whether the form can be pulled by ERP"""
  isPullable: Boolean!

  """Job details"""
  job: Job

  """Whether the measured voltage and power (NIV) is correct"""
  measurePower: Boolean

  """Object number"""
  objectNumber: String

  """Owner"""
  owner: String

  """Protocol date"""
  protocolDate: DateTime

  """Protocol text"""
  protocolText: String

  """Protocols"""
  protocols: [Protocol!]

  """Last time the form was pulled by ERP"""
  pulledAt: DateTime

  """Date the form is created"""
  startDate: DateTime

  """Tenant"""
  tenant: Tenant

  """Total cost of the job"""
  totalAmount: Float

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

input FormFilterInput {
  """Date the form is created"""
  createdAt: DateTime

  """Date the form is resolved"""
  endDate: DateTime

  """Whether is findable"""
  findable: Boolean

  """Whether the job is an emergency"""
  isEmergency: Boolean

  """Whether the job is finished"""
  isFinished: Boolean

  """Job filter"""
  job: JobFilterInput

  """Last time the form was pulled by ERP"""
  pulledAt: DateTime
}

type FormSearchOutput {
  """How many items are found within database"""
  count: Float!

  """Forms that fit query"""
  data: [Form!]!
}

type Image {
  """Capture Date"""
  capturedAt: DateTime

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """File"""
  file: S3File!

  """Image Height in Pixels"""
  height: Float

  """Labels of detected objects on image"""
  labels: [Label!]!

  """GPS Latitude"""
  latitude: Float

  """Marks this object as readable for all logged in users"""
  loggedInReadAccess: Boolean!

  """GPS Longitude"""
  longitude: Float

  """Owner of this object, has full control over it"""
  owner: User!

  """Marks this object as publicly readable"""
  publicReadAccess: Boolean!

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!

  """Image Width in Pixels"""
  width: Float
}

type ImageFile {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Name of File"""
  filename: String

  """Form the image belongs to"""
  form: Form!

  """Files mime type"""
  mimetype: String

  """Path that leads to file"""
  path: String

  """Filesize in bytes"""
  size: Float

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

type ImageSearchOutput {
  """How many items are found within database"""
  count: String!

  """Image that fit query"""
  data: [Image!]!
}

type Job {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Job status"""
  status: JobStatus

  """Job type"""
  type: JobType

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

input JobFilterInput {
  """Whether is findable"""
  findable: Boolean

  """Job status"""
  status: JobStatus

  """Job type"""
  type: JobType
}

enum JobStatus {
  NONE
  OPEN
  ORDERED
  PENDING
  RECEIVED
  TERMINATED
}

enum JobType {
  APPOINTMENT
  EXTERNAL_SERVICE
  MATERIAL_ORDER
  NEW_DEVICES
  NONE
  OFFER
}

type Label {
  """Bounding box for every instance of this label on image"""
  boundingBox: BoundingBox!

  """Confidence between 0 and 100"""
  confidence: Float!

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Image on which this label was detected"""
  image: Image!

  """Label Name"""
  name: String!

  """Parent labels"""
  parents: [String!]!

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

enum LegalForm {
  COOPERATIVE
  INDIVIDUAL_COMPANY
  LIMITED_PARTNERSHIP
  LLC
  PUBLIC_COMPANY
}

input ManipulateAccessGroupsInput {
  addReadAccess: [ID!] = []
  addWriteAccess: [ID!] = []
  removeReadAccess: [ID!] = []
  removeWriteAccess: [ID!] = []
  uuid: ID!
}

input MarkAsReadInput {
  """Uuid of notification"""
  uuid: ID!
}

type Message {
  """Content of message"""
  content: String!

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Language of message"""
  lang: String!

  """Link to which the user is lead on click of the notification"""
  link: String

  """Notification on which this message appears"""
  notification: Notification!

  """Title of message"""
  title: String!

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

input MessageInput {
  """Content of message"""
  content: String!

  """Language of message"""
  lang: String!

  """Link to which the user is lead on click of the notification"""
  link: String

  """Title of message"""
  title: String!
}

type Mutation {
  AddUserToUserGroup(addUserToUserGroupInput: AddUserToUserGroupInput!): UserGroup!
  AddUsersToUserGroup(addUsersToUserGroupInput: AddUsersToUserGroupInput!): UserGroup!
  AdminCreateUser(adminCreateUserInput: AdminCreateUserInput!): AdminCreateUserOutput!
  CreateFile(createFileInput: CreateFileInput!): S3File!
  CreateImage(createImageInput: CreateImageInput!): Image!
  CreateImageFile(createFileInput: CreateFileInput!): ImageFile!
  CreateUserGroup(createUserGroupInput: CreateUserGroupInput!): UserGroup!
  DeleteFile(deleteInput: DeleteInput!): S3File!
  DeleteImage(deleteImageInput: DeleteInput!): Image!
  DeleteUser(deleteUserInput: DeleteInput!): User!
  DeleteUserGroup(deleteInput: DeleteInput!): UserGroup!
  DisableUser(disableUserInput: UpdateInput!): User!
  EnableUser(enableUserInput: UpdateInput!): User!
  ForceUserPasswordChange(forceUserPasswordChangeInput: UpdateInput!): User!
  ManipulateFileAccessUserGroups(manipulateAccessGroups: ManipulateAccessGroupsInput!): S3File!
  MarkNotificationAsRead(markAsReadInput: MarkAsReadInput!): Notification!
  NotifyAllUsers(notifyInput: NotifyInput!): [Notification!]!
  NotifyUsers(notifyUsersInput: NotifyUsersInput!): [Notification!]!
  RemoveUserFromUserGroup(removeUserFromUserGroupInput: RemoveUserFromUserGroupInput!): UserGroup!
  SignupCreateUser(signupCreateUserInput: SignupCreateUserInput!): User!
  TestPayment: PaymentIntentOutput!
  UpdateFile(updateFileInput: UpdateFileInput!): S3File!
  UpdateUser(updateUserInput: UpdateUserInput!): User!
  UpdateUserGroup(updateUserGroupInput: UpdateUserGroupInput!): UserGroup!
  createArticleSuggestionList(uuid: String!): CreateArticleSuggesstionOutput!
  createForm(createFormInput: CreateFormInput!): Form!
  deleteForm(deleteInput: DeleteInput!): Form!
  updateForm(updateFormInput: UpdateFormInput!): Form!
}

type Notification {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Messages in different languages related to this notification"""
  messages: [Message!]!

  """Whether the recipient has seen the notification"""
  read: Boolean!

  """Recipient of the notification"""
  recipient: User!

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

input NotifyInput {
  """Messages in different languages"""
  messages: [MessageInput!]!
}

input NotifyUsersInput {
  """Messages in different languages"""
  messages: [MessageInput!]!

  """Uuids of users that shall receive notifications"""
  recipients: [ID!]!
}

type Payment {
  """Amount paid in this transaction"""
  amount: Float!

  """Author of this article"""
  buyer: User!

  """Creation date"""
  createdAt: DateTime!

  """transaction currency"""
  currency: String!

  """Date of deletion"""
  deletedAt: DateTime

  """Description of purchase"""
  description: String!

  """Stripe payment id"""
  intentId: String!

  """Whether the payment is completed"""
  paid: Boolean!

  """Stripe payment intent client secret"""
  secret: String!

  """Payment status"""
  status: String!

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

type PaymentIntentOutput {
  """Amount paid in this transaction"""
  amount: Float!

  """transaction currency"""
  currency: String!

  """Description of purchase"""
  description: String!

  """Stripe payment intent client secret"""
  secret: String!

  """Payment status"""
  status: String!

  """UUID"""
  uuid: ID!
}

type PaymentSearchOutput {
  """How many items are found within database"""
  count: String!

  """Payments that fit query"""
  data: [Payment!]!
}

type Protocol {
  """Amount of units in the protocol"""
  amount: String

  """Article number"""
  articleNumber: String

  """Creation date"""
  createdAt: DateTime!

  """Protocol date"""
  date: DateTime

  """Date of deletion"""
  deletedAt: DateTime

  """Description of the protocol"""
  description: String

  """Unit discount"""
  discount: String

  """Form this protocol belongs to"""
  form: Form

  """Label of the protocol"""
  label: String

  """Price of units in the protocol"""
  price: String

  """Sum of the total cost in the protocol"""
  sum: String

  """Unit of the protocol"""
  unit: String

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

type Query {
  AllFiles(
    """URL expiration duration (in seconds)"""
    expires: Int

    """Path in which files must be located"""
    path: String

    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500
  ): [S3File!]!
  AllImages(
    """URL expiration duration (in seconds)"""
    expires: Int

    """How many images to skip"""
    skip: Int = 0

    """Number of images to load"""
    take: Int = 500
  ): [Image!]!
  AllMyFiles(
    """URL expiration duration (in seconds)"""
    expires: Int

    """Path in which files must be located"""
    path: String

    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500
  ): [S3File!]!
  AllMyImages(
    """URL expiration duration (in seconds)"""
    expires: Int

    """How many images to skip"""
    skip: Int = 0

    """Number of images to load"""
    take: Int = 500
  ): [Image!]!
  AllPublicFiles(
    """URL expiration duration (in seconds)"""
    expires: Int

    """Path in which files must be located"""
    path: String

    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500
  ): [S3File!]!
  AllUserGroups(
    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500
  ): [UserGroup!]!
  AllUsers(
    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500
  ): [User!]!
  File(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuid: ID!
  ): S3File!
  FileReadAccessUserGroups(uuid: ID!): [UserGroup!]!
  FileWriteAccessUserGroups(uuid: ID!): [UserGroup!]!
  Files(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuids: [ID!] = []
  ): [S3File!]!
  Folders(
    """Path at start of folder"""
    path: String!
  ): [FolderOutput!]!
  Image(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuid: ID!
  ): Image!
  ImageForFile(
    """URL expiration duration (in seconds)"""
    expires: Int
    file: ID!
  ): Image!
  Images(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuids: [ID!] = []
  ): [Image!]!
  IsUserEnabled(cognitoUuid: ID, uuid: ID!): Boolean!
  MyFiles(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuids: [ID!] = []
  ): [S3File!]!
  MyFolders(
    """Path at start of folder"""
    path: String!
  ): [FolderOutput!]!
  MyImages(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuids: [ID!] = []
  ): [Image!]!
  MyUser: User!
  MyUserGroups(
    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500
  ): [UserGroup!]!
  Payment(uuid: ID!): Payment!
  PublicFiles(
    """URL expiration duration (in seconds)"""
    expires: Int
    uuids: [ID!] = []
  ): [S3File!]!
  PublicFolders(
    """Path at start of folder"""
    path: String!
  ): [FolderOutput!]!
  SearchAdminFiles(
    """Sort descending"""
    descending: Boolean = false

    """URL expiration duration (in seconds)"""
    expires: Int

    """Filter by property and value"""
    filter: FilterInput

    """Subset of the module's allowed search keys to search in"""
    searchKeys: [String!]

    """Search for text within items"""
    searchTerm: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): FileSearchOutput!
  SearchFiles(
    """Sort descending"""
    descending: Boolean = false

    """URL expiration duration (in seconds)"""
    expires: Int

    """Filter by property and value"""
    filter: FilterInput

    """Subset of the module's allowed search keys to search in"""
    searchKeys: [String!]

    """Search for text within items"""
    searchTerm: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): FileSearchOutput!
  SearchImages(
    """Sort descending"""
    descending: Boolean = false

    """URL expiration duration (in seconds)"""
    expires: Int

    """Filter by property and value"""
    filter: FilterInput

    """Subset of the module's allowed search keys to search in"""
    searchKeys: [String!]

    """Search for text within items"""
    searchTerm: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): ImageSearchOutput!
  SearchMyFiles(
    """Sort descending"""
    descending: Boolean = false

    """URL expiration duration (in seconds)"""
    expires: Int

    """Filter by property and value"""
    filter: FilterInput

    """Subset of the module's allowed search keys to search in"""
    searchKeys: [String!]

    """Search for text within items"""
    searchTerm: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): FileSearchOutput!
  SearchMyImages(
    """Sort descending"""
    descending: Boolean = false

    """URL expiration duration (in seconds)"""
    expires: Int

    """Filter by property and value"""
    filter: FilterInput

    """Subset of the module's allowed search keys to search in"""
    searchKeys: [String!]

    """Search for text within items"""
    searchTerm: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): ImageSearchOutput!
  SearchPayments(
    """Sort descending"""
    descending: Boolean = false

    """Filter by property and value"""
    filter: FilterInput

    """Subset of the module's allowed search keys to search in"""
    searchKeys: [String!]

    """Search for text within items"""
    searchTerm: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): PaymentSearchOutput!
  SearchPublicFiles(
    """Sort descending"""
    descending: Boolean = false

    """URL expiration duration (in seconds)"""
    expires: Int

    """Filter by property and value"""
    filter: FilterInput

    """Subset of the module's allowed search keys to search in"""
    searchKeys: [String!]

    """Search for text within items"""
    searchTerm: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): FileSearchOutput!
  SearchUserGroups(
    """Sort descending"""
    descending: Boolean = false

    """Filter by property and value"""
    filter: FilterInput

    """Subset of the module's allowed search keys to search in"""
    searchKeys: [String!]

    """Search for text within items"""
    searchTerm: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): UserGroupSearchOutput!
  SearchUsers(
    """Sort descending"""
    descending: Boolean = false

    """Filter by property and value"""
    filter: FilterInput

    """Subset of the module's allowed search keys to search in"""
    searchKeys: [String!]

    """Search for text within items"""
    searchTerm: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): UserSearchOutput!
  UnreadNotifications: [Notification!]!
  User(cognitoUuid: ID, uuid: ID!): User!
  UserGroup(uuid: ID!): UserGroup!
  UserGroups(uuids: [ID!] = []): [UserGroup!]!
  UserGroupsOfUser(
    """How many items to skip"""
    skip: Int = 0

    """Number of items to load"""
    take: Int = 500

    """User UUID"""
    userUuid: ID!
  ): [UserGroup!]!
  Users(uuids: [ID!] = []): [User!]!
  articleSuggestions(searchTerm: String!): [ArticleSuggestion!]!
  getForm(uuid: ID!): Form!
  searchForms(
    """Sort descending"""
    descending: Boolean = false

    """Filter by property and search term"""
    filter: FormFilterInput

    """Subset of the module's allowed search keys to search in"""
    searchKeys: [String!]

    """Search for text within items"""
    searchTerm: String

    """How many items to skip"""
    skip: Int = 0

    """Sort by property"""
    sortBy: String

    """Number of items to load"""
    take: Int = 500
  ): FormSearchOutput!
}

input RemoveUserFromUserGroupInput {
  """Uuid of group to which user shall be added"""
  userGroupUuid: ID!

  """Uuid of user that shall be removed from group"""
  userUuid: ID!
}

enum Role {
  ADMIN
  USER
}

type S3File {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Name of File"""
  filename: String

  """Marks this object as readable for all logged in users"""
  loggedInReadAccess: Boolean!

  """Files mime type"""
  mimetype: String!

  """Owner of this object, has full control over it"""
  owner: User!

  """Path that leads to file"""
  path: String

  """Marks this object as publicly readable"""
  publicReadAccess: Boolean!

  """Signed URL to upload object. Only works 1 time"""
  signedUrl: String

  """Filesize in bytes"""
  size: Float!

  """Last modification date"""
  updatedAt: DateTime

  """Pre-signed download URL"""
  url: String

  """UUID"""
  uuid: ID!
}

input SignupCreateUserInput {
  email: String!
  lang: String

  """password"""
  password: String!
  username: String!
}

type Tenant {
  """Tenant's address"""
  address: Address

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Client's e-mail address"""
  email: String

  """Tenant's first name"""
  firstName: String

  """Floor of tenant's apartment"""
  floor: String

  """Tenant's last name"""
  lastName: String

  """Tenant's phone number"""
  phoneNumber: String

  """Last modification date"""
  updatedAt: DateTime

  """UUID"""
  uuid: ID!
}

input UpdateAddressInput {
  additionalAddress: String
  city: String
  number: String
  street: String
  uuid: ID
  zipCode: Float
}

input UpdateArticleInput {
  """Amount"""
  amount: Float

  """Article number"""
  articleNumber: String

  """Description"""
  description: String

  """Discount in percent"""
  discount: Float

  """Manufacturer number"""
  manufacturerNumber: String

  """Name"""
  name: String

  """Price"""
  price: Float
  uuid: ID
}

input UpdateBillingInput {
  """Billing address"""
  address: UpdateAddressInput

  """Billing company name"""
  companyName: String

  """Billing e-mail address"""
  email: String

  """First name on bill"""
  firstName: String

  """Last name on bill"""
  lastName: String
  uuid: ID
}

input UpdateClientInput {
  """Client's address"""
  address: UpdateAddressInput

  """Legal form of the client's company"""
  companyLegalForm: LegalForm

  """Name of the client's company"""
  companyName: String

  """Client's e-mail address"""
  email: String

  """Client's first name"""
  firstName: String

  """Client's last name"""
  lastName: String

  """Client's phone number"""
  phoneNumber: String
  uuid: ID
}

input UpdateDeviceInput {
  """Additional information about the device"""
  deviceInformation: String

  """Manufacturer that made the device"""
  deviceManufacturer: String

  """Device's model"""
  deviceModel: String

  """Device's production number"""
  deviceProductionNumber: String

  """Year the device was manufactured"""
  deviceProductionYear: Float

  """Device to repair"""
  deviceType: DeviceType
  uuid: ID
}

input UpdateExpenseInput {
  """Discount in percent"""
  discount: Float

  """Expense name"""
  name: String

  """Amount of time needed for the job"""
  timeAmount: Float
  uuid: ID
}

input UpdateFileInput {
  """Name of File"""
  filename: String

  """Path to file"""
  path: String!
  uuid: ID!
}

input UpdateFormInput {
  """Articles"""
  articles: [UpdateArticleInput!]

  """Billing"""
  billing: UpdateBillingInput

  """Client"""
  client: UpdateClientInput

  """Problem description"""
  description: String

  """Devices"""
  devices: [UpdateDeviceInput!]

  """Employee's ID"""
  employeeId: String

  """Date the form is resolved"""
  endDate: DateTime

  """Expenses"""
  expenses: [UpdateExpenseInput!]

  """External order number"""
  externalOrderNumber: String

  """Additional text"""
  freeText: String

  """Images"""
  images: [UpdateImageFileInput!]

  """Internal order number"""
  internalOrderNumber: String

  """Whether the job is an emergency"""
  isEmergency: Boolean

  """Whether the job is finished"""
  isFinished: Boolean

  """Whether the form can be pulled by ERP"""
  isPullable: Boolean

  """Job details"""
  job: UpdateJobInput

  """Whether the measured voltage and power (NIV) is correct"""
  measurePower: Boolean

  """Object number"""
  objectNumber: String

  """Owner"""
  owner: String

  """Protocol date"""
  protocolDate: DateTime

  """Protocol text"""
  protocolText: String

  """Protocols"""
  protocols: [UpdateProtocolInput!]

  """Last time the form was pulled by ERP"""
  pulledAt: DateTime

  """Date the form is created"""
  startDate: DateTime

  """Tenant"""
  tenant: UpdateTenantInput

  """Total cost of the job"""
  totalAmount: Float

  """Form UUID"""
  uuid: ID
}

input UpdateImageFileInput {
  """Name of File"""
  filename: String

  """Files mime type"""
  mimetype: String

  """Path that leads to file"""
  path: String

  """Filesize in bytes"""
  size: Float

  """ImageFile UUID"""
  uuid: ID
}

input UpdateInput {
  uuid: ID!
}

input UpdateJobInput {
  """Job status"""
  status: JobStatus

  """Job type"""
  type: JobType
  uuid: ID
}

input UpdateProtocolInput {
  """Amount of units in the protocol"""
  amount: String

  """Article number"""
  articleNumber: String

  """Protocol date"""
  date: DateTime

  """Description of the protocol"""
  description: String

  """Unit discount"""
  discount: String

  """Label of the protocol"""
  label: String

  """Price of units in the protocol"""
  price: String

  """Sum of the total cost in the protocol"""
  sum: String

  """Unit of the protocol"""
  unit: String
  uuid: ID
}

input UpdateTenantInput {
  """Tenant's address"""
  address: UpdateAddressInput

  """Client's e-mail address"""
  email: String

  """Tenant's first name"""
  firstName: String

  """Floor of tenant's apartment"""
  floor: String

  """Tenant's last name"""
  lastName: String

  """Tenant's phone number"""
  phoneNumber: String
  uuid: ID
}

input UpdateUserGroupInput {
  """Name of group"""
  name: String!
  uuid: ID!
}

input UpdateUserInput {
  email: String
  lang: String
  username: String
  uuid: ID!
}

type User {
  """Cognito UUID"""
  cognitoUuid: String!

  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """E-mail address"""
  email: String!

  """User enabled or not"""
  enabled: Boolean

  """User groups this user belongs to"""
  groups: [UserGroup!]!

  """Preferred language of user"""
  lang: String!

  """User role"""
  role: String

  """Last modification date"""
  updatedAt: DateTime

  """Username"""
  username: String!

  """UUID"""
  uuid: ID!
}

type UserGroup {
  """Creation date"""
  createdAt: DateTime!

  """Date of deletion"""
  deletedAt: DateTime

  """Username"""
  name: String!

  """Resources this user group has read access to"""
  readAccess: AccessControlledEntity!

  """Last modification date"""
  updatedAt: DateTime

  """Users belonging to this user group"""
  users: [User!]!

  """UUID"""
  uuid: ID!

  """Resources this user group has write access to"""
  writeAccess: AccessControlledEntity!
}

type UserGroupSearchOutput {
  """How many items are found within database"""
  count: String!

  """User Groups that fit query"""
  data: [UserGroup!]!
}

type UserSearchOutput {
  """How many items are found within database"""
  count: String!

  """Users that fit query"""
  data: [User!]!
}