# --------------------------------------------------------------
# Used for new releases in GitHub Actions (draft or live)
# Updates existing infrastructure without recreating everything
# --------------------------------------------------------------

if [[ $1 != "live" ]] && [[ $1 != "test" ]]
then
  echo "Invalid deployment mode $1"
  exit
fi

# ==========================================
# ==  Step 0: Preparation (get variables) ==
# ==========================================

# Create flox.tfvars file from flox.config.json in frontend & backend
cd ../support || exit
zsh /create-flox-tfvars.sh
echo "type=\"$1\"" >> flox.tfvars

# Get additional flox.config variables
project=$(jq '.general.project' ../../backend/flox.config.json)
project=${project:1:-1}

build_mode=$(jq '.general.mode' ../../frontend/flox.config.json)
build_mode=${build_mode:1:-1}

aws_region=$(jq '.general.aws_region' ../../backend/flox.config.json)
aws_region=${aws_region:1:-1}

organisation=$(jq '.general.organisation' ../../backend/flox.config.json)
organisation=${organisation:1:-1}

# ==========================================
# ====       Step 1: Main Update        ====
# ==========================================

cd ../3_update || exit

# Replace 'TYPE' in config.tf with actual type (live, test)
sed -i -e "s/##TYPE##/$1/g" config.tf

# Replace 'PROJECT' in config.tf with actual project name
sed -i -e "s/##PROJECT##/$project/g" config.tf

# Replace 'ORGANISATION' in config.tf with actual organisation name
sed -i -e "s/##ORGANISATION##/$organisation/g" config.tf


# Generate frontend .env file from outputs
cd ../../frontend || exit
rm -f .env
echo "# ======== Frontend AWS variables ========" >> .env
echo "# This file is AUTOGENERATED - do not edit!" >> .env
echo "# ==========================================" >> .env
echo "VUE_APP_GRAPHQL_ENDPOINT=https://api.$url/graphql" >> .env
echo "VUE_APP_NAME=$project-$1" >> .env
echo "VUE_APP_AWS_REGION=$aws_region" >> .env
# TODO GET from SSM parameter store: aws ssm get-parameter --name test --profile flox
#echo "VUE_APP_USER_POOL_ID=$user_pool_id" >> .env
#echo "VUE_APP_USER_POOL_CLIENT_ID=$user_pool_client_id" >> .env
cd ../scripts/3_update

# Build & zip frontend and backend
zsh ../support/build.bash "$1" "$project" "$build_mode"

# Apply update Terraform
terraform init
terraform apply -auto-approve -var-file="../support/flox.tfvars"

# ==========================================
# ====         Step 2: Cleanup         =====
# ==========================================

# Reset config.tf file to its respective template files
cp config.tftemplate config.tf
