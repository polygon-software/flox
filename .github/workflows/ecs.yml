name: Push to Docker Hub & deploy to AWS ECS

on:
  push:
    branches:
      - master
      - project-*
  pull_request:
    branches:
      - master
      - project-*

env:
  AWS_REGION: eu-central-1                   
  ECS_SERVICE: MY_ECS_SERVICE                 # TODO set this to your Amazon ECS service name
  ECS_CLUSTER: bootstrap-test                 # TODO set this to your Amazon ECS cluster name
  AWS_DOCKERHUB_TOKEN: ${{ secrets.AWS_DOCKERHUB_TOKENÂ }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECS_KEY_SECRET }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Generate Repository name
        id: repo_name
        run: |
          GITHUB_REF=${{github.ref_name}}
          GITHUB_REF=${GITHUB_REF,,}
          echo ${GITHUB_REF}
          echo "::set-output name=BRANCH_NAME::${GITHUB_REF}"
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      # - name: Build and push Frontend
      #  uses: docker/build-push-action@v2
      #  with:
      #    context: frontend
      #    push: true
      #    tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.repo_name.outputs.BRANCH_NAME }}-frontend:latest
          
      #- name: Build and push Backend
      #  uses: docker/build-push-action@v2
      #  with:
      #    context: backend
      #    push: true
      #    tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.repo_name.outputs.BRANCH_NAME }}-backend:latest
          
      - name: Install Docker CLI
        uses: actions-hub/docker/cli@master
        env:
          SKIP_LOGIN: true
      - name: Deploy to ECS
        run: |
          docker --version
          docker context create ecs ecscontext --profile test
          docker context use ecscontext
          docker compose ps
          docker context rm ecscontext
