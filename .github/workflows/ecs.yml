name: Push to Docker Hub & deploy to AWS ECS

on:
  push:
    branches:
      - master
      - project-*

env:
  AWS_REGION: eu-central-1                   
  AWS_DOCKERHUB_TOKEN: ${{ secrets.AWS_DOCKERHUB_TOKENÂ }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECS_KEY_SECRET }}
  
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Generate Repository name
        id: repo_name
        run: |
          GITHUB_REF=${{github.ref_name}}
          GITHUB_REF=${GITHUB_REF,,}
          echo ${GITHUB_REF}
          echo "::set-output name=BRANCH_NAME::${GITHUB_REF}"
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push Frontend
        uses: docker/build-push-action@v2
        with:
          context: frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.repo_name.outputs.BRANCH_NAME }}-frontend:latest
          
      - name: Build and push Backend
        uses: docker/build-push-action@v2
        with:
          context: backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.repo_name.outputs.BRANCH_NAME }}-backend:latest
      
      - name: Set up Load Balancer & set Environment Variable
        run: |
          VPCID=`aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId'`
          SUBNETS=`aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPCID --query 'Subnets[*].SubnetId' --output text`
          LOADBALANCER=`aws elbv2 create-load-balancer --name ${{ steps.repo_name.outputs.BRANCH_NAME }} --type network --subnets $SUBNETS --query 'LoadBalancers[0].LoadBalancerArn'`
          echo "AWS_LOADBALANCER=${{ steps.repo_name.outputs.BRANCH_NAME }}" >> $GITHUB_ENV
          
      - name: Set up DNS/URL Environment variables
        run: |
          URL=`aws elbv2 describe-load-balancers --names ${{ steps.repo_name.outputs.BRANCH_NAME }} --query 'LoadBalancers[*].DNSName' --output text`
          echo "AWS_LOADBALANCER_URL=$URL" >> $GITHUB_ENV
          echo "VUE_APP_GRAPHQL_ENDPOINT=http://$URL:${{ env.SERVER_PORT }}/graphql" >> $GITHUB_ENV
          echo "VUE_APP_WS_ENDPOINT=ws://$URL:${{ env.SERVER_PORT }}/graphql-websocket" >> $GITHUB_ENV
          
      - name: Deploy to ECS
        run: |
          curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh
          docker context create ecs ecscontext --from-env
          docker login
          docker context use ecscontext
          docker compose -p ${{ steps.repo_name.outputs.BRANCH_NAME }} up
          docker context use default
          docker context rm ecscontext
   
